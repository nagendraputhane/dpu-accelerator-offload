name: build-cn10k-ovs

on:
  push:
  schedule:
    - cron: "0 0 * * 1"
  pull_request:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  ubuntu-cn10k-build:
    name: ubuntu-cn10k-arm64
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4.2.2

      - name: Generate cache keys
        id: get_ref_keys
        run: |
          echo "ccache=ccache-$(date -u +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Retrieve ccache cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ steps.get_ref_keys.outputs.ccache }}-${{ github.ref }}
          restore-keys: |
            ${{ steps.get_ref_keys.outputs.ccache }}-refs/heads/main

      - name: Extract version details
        id: version
        run: |
          mkdir -p "${PWD}/artifacts"
          # Determine whether this is a tagged (release) commit or a devel build.
          git tag --points-at HEAD > /tmp/tags
          if [ -s /tmp/tags ]; then
            PKG_POSTFIX=""
            NIGHTLY=false
          else
            PKG_POSTFIX="-devel"
            NIGHTLY=true
          fi
          echo "PKG_VERSION_NAME=$(cat VERSION)" >> "${PWD}/artifacts/env"
          echo "DPDK_PKG_VERSION=$(grep RELEASE_VERSION DPDK_VERSION | awk -F'=' '{print $2}')" >> "${PWD}/artifacts/env"
          echo "DPDK_BASE_PKG_VERSION=$(grep BASE_VERSION DPDK_VERSION | awk -F'=' '{print $2}' | awk -F'.' '{print $1\".\"$2}')" >> "${PWD}/artifacts/env"
          source "${PWD}/artifacts/env"
          echo "PKG_POSTFIX=${PKG_POSTFIX}" >> "${PWD}/artifacts/env"
          echo "NIGHTLY=${NIGHTLY}" >> $GITHUB_OUTPUT

      - name: Install dependencies and dpdk package
        run: |
          mkdir -p ~/.ccache
          sudo apt-get update -q -y
          sudo apt-get install -y \
            apt-utils python3-sphinx-rtd-theme python3-pip python3-pyelftools \
            python3-setuptools python3-wheel build-essential meson ccache git doxygen \
            software-properties-common sphinx-common pkg-config \
            libnl-3-dev libnl-route-3-dev libnl-xfrm-3-dev libarchive-dev libbsd-dev libbpf-dev \
            libfdt-dev libjansson-dev autoconf dh-autoreconf libssl-dev ninja-build zlib1g-dev \
            bash-completion gcc-14 bzip2-doc icu-devtools libacl1-dev libattr1-dev libbz2-dev \
            libgmp-dev libgmpxx4ldbl libicu-dev liblz4-dev liblzma-dev libxml2-dev libzstd-dev \
            nettle-dev wget lsb-release
          git config --global --add safe.directory "${PWD}"
          DISTRO="ubuntu-$(lsb_release -rs)"
          echo "DISTRO=${DISTRO}" >> "${PWD}/artifacts/env"
          source "${PWD}/artifacts/env"
          wget "https://github.com/MarvellEmbeddedProcessors/marvell-dpdk/releases/download/dpdk-cn10k-${DPDK_BASE_PKG_VERSION}_${DPDK_PKG_VERSION}-${DISTRO}-${DPDK_PKG_VERSION}/dpdk-${DPDK_BASE_PKG_VERSION}-cn10k_${DPDK_PKG_VERSION}_arm64.deb"
          sudo apt-get install -y ./dpdk-${DPDK_BASE_PKG_VERSION}-cn10k_${DPDK_PKG_VERSION}_arm64.deb
          export CC='ccache gcc-14'
          echo "cache_dir = ~/.ccache" > ~/.ccache/ccache.conf
          ccache -p
          pkg-config --list-all

      - name: Build OVS with Debug Flags (Single Build)
        id: build_ovs
        run: |
          source "${PWD}/artifacts/env"
          # Determine the OVS patch version and derive the OVS version.
          OVS_PATCH_VERSION=$(ls patches/ovs | head -n 1)
          OVS_VERSION=${OVS_PATCH_VERSION#v}
          echo "OVS_VERSION=${OVS_VERSION}" >> "${PWD}/artifacts/env"
          wget "https://www.openvswitch.org/releases/openvswitch-${OVS_VERSION}.tar.gz"
          tar xzf openvswitch-${OVS_VERSION}.tar.gz
          BASE_DIR=${PWD}
          cd "openvswitch-${OVS_VERSION}"
          # Apply all patches.
          for patch in ${BASE_DIR}/patches/ovs/${OVS_PATCH_VERSION}/*.patch; do
              patch -p1 < "$patch"
          done
          ./boot.sh
          # Configure with -g to include debug information.
          ./configure --prefix="${BASE_DIR}/install/usr/local" \
                      --localstatedir="${BASE_DIR}/install/usr/local/var" \
                      --sysconfdir="${BASE_DIR}/install/usr/local/etc" \
                      --with-dpdk=static \
                      CFLAGS="-g -DALLOW_EXPERIMENTAL_API -mcpu=neoverse-n2+crypto+sve2"
          make -j4 install

      - name: Extract Debug Symbols and Strip Binary
        id: extract_strip
        run: |
          source "${PWD}/artifacts/env"
          # Set the path for the installed binary.
          DEBUG_BIN="${PWD}/install/usr/local/sbin/ovs-vswitchd"
          # Create a temporary directory to hold the debug symbols.
          mkdir -p "${PWD}/debug-symbols/usr/local/sbin"
          # Extract the debug symbols into a separate file.
          objcopy --only-keep-debug "${DEBUG_BIN}" "${PWD}/debug-symbols/usr/local/sbin/ovs-vswitchd.dbg"
          # Strip the debug symbols from the binary for the main package.
          strip --strip-debug "${DEBUG_BIN}"

      - name: Package OVS Debian Package (Main)
        id: package_ovs
        run: |
          source "${PWD}/artifacts/env"
          cd "${PWD}/install"
          # Create a control file with package metadata.
          mkdir -p DEBIAN
          cat <<EOF > DEBIAN/control
Source: Open vSwitch
Package: ovs-${OVS_VERSION}-cn10k${PKG_POSTFIX}
Version: ${PKG_VERSION_NAME}
Depends: $(dpkg-shlibdeps -O usr/local/sbin/ovs-vswitchd | awk -F'Depends=' '{print $2}'), dpdk-${DPDK_BASE_PKG_VERSION}-cn10k (= ${DPDK_PKG_VERSION})
Maintainer: Jerin Jacob (jerinj@marvell.com)
Architecture: arm64
Homepage: https://www.openvswitch.org/
Description: Open vSwitch (OVS) for Marvell Octeon 10
EOF
          cd ..
          # Rename the installation directory to include version details.
          mv install ovs-${OVS_VERSION}-cn10k${PKG_POSTFIX}_${PKG_VERSION_NAME}_arm64
          dpkg --build ovs-${OVS_VERSION}-cn10k${PKG_POSTFIX}_${PKG_VERSION_NAME}_arm64
          cp ovs-${OVS_VERSION}-cn10k${PKG_POSTFIX}_${PKG_VERSION_NAME}_arm64.deb artifacts/.

      - name: Package OVS Debug Debian Package (Debug Symbols Only)
        id: package_ovs_debug
        run: |
          source "${PWD}/artifacts/env"
          # Define a package directory for the debug symbols.
          PACKAGE_DIR="ovs-dbg-${OVS_VERSION}-cn10k${PKG_POSTFIX}_${PKG_VERSION_NAME}_arm64"
          # Create the directory structure where debug symbols are expected.
          mkdir -p ${PACKAGE_DIR}/usr/lib/debug/usr/local/sbin
          # Copy the extracted debug symbol file from the temporary directory.
          cp debug-symbols/usr/local/sbin/ovs-vswitchd.dbg ${PACKAGE_DIR}/usr/lib/debug/usr/local/sbin/
          # Create a DEBIAN control file for the debug package.
          mkdir -p ${PACKAGE_DIR}/DEBIAN
          cat <<EOF > ${PACKAGE_DIR}/DEBIAN/control
Source: Open vSwitch
Package: ovs-dbg-${OVS_VERSION}-cn10k${PKG_POSTFIX}
Version: ${PKG_VERSION_NAME}
Depends: ovs-${OVS_VERSION}-cn10k${PKG_POSTFIX} (= ${PKG_VERSION_NAME})
Maintainer: Jerin Jacob (jerinj@marvell.com)
Architecture: arm64
Homepage: https://www.openvswitch.org/
Description: Debug symbols for Open vSwitch (OVS) for Marvell Octeon 10
EOF
          dpkg --build ${PACKAGE_DIR}
          cp ${PACKAGE_DIR}.deb artifacts/.

      - name: Export version details
        id: artifacts
        run: |
          source "${PWD}/artifacts/env"
          echo "PKG_VERSION_NAME=${PKG_VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "OVS_VERSION=${OVS_VERSION}" >> $GITHUB_OUTPUT
          echo "DISTRO=${DISTRO}" >> $GITHUB_OUTPUT
          echo "DPDK_PKG_VERSION=${DPDK_PKG_VERSION}" >> $GITHUB_OUTPUT
          echo "DPDK_BASE_PKG_VERSION=${DPDK_BASE_PKG_VERSION}" >> $GITHUB_OUTPUT
          echo "PKG_POSTFIX=${PKG_POSTFIX}" >> $GITHUB_OUTPUT
          if [ "$PKG_POSTFIX" = "-devel" ]; then
            TAG=devel
            IS_DEVEL=true
          else
            TAG=${PKG_VERSION_NAME}
            IS_DEVEL=false
          fi
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "IS_DEVEL=${IS_DEVEL}" >> $GITHUB_OUTPUT

      - name: Delete existing release
        if: ${{ github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete ovs-${{ steps.artifacts.outputs.OVS_VERSION }}-cn10k-${{ steps.artifacts.outputs.PKG_VERSION_NAME }}-${{ steps.artifacts.outputs.DISTRO }}-${{ steps.artifacts.outputs.TAG }} --cleanup-tag -y
        continue-on-error: true

      - name: Release OVS cn10k package
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2.0.4
        with:
          draft: false
          tag_name: ovs-${{ steps.artifacts.outputs.OVS_VERSION }}-cn10k-${{ steps.artifacts.outputs.PKG_VERSION_NAME }}-${{ steps.artifacts.outputs.DISTRO }}-${{ steps.artifacts.outputs.TAG }}
          files: |
            ${{ github.workspace }}/artifacts/ovs-${{ steps.artifacts.outputs.OVS_VERSION }}-cn10k${{ steps.artifacts.outputs.PKG_POSTFIX }}_${{ steps.artifacts.outputs.PKG_VERSION_NAME }}_arm64.deb
            ${{ github.workspace }}/artifacts/ovs-dbg-${{ steps.artifacts.outputs.OVS_VERSION }}-cn10k${{ steps.artifacts.outputs.PKG_POSTFIX }}_${{ steps.artifacts.outputs.PKG_VERSION_NAME }}_arm64.deb

      - name: Dispatch package update event
        if: ${{ github.event_name == 'push' }}
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PPA_REPO_SECRET }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/marvellembeddedprocessors/packages/dispatches \
            -d '{"event_type":"dispatch-event", "client_payload": {"package" : "ovs",
            "tag": "ovs-'${{ steps.artifacts.outputs.OVS_VERSION }}'-cn10k-'${{ steps.artifacts.outputs.PKG_VERSION_NAME }}'-'${{ steps.artifacts.outputs.DISTRO }}'-'${{ steps.artifacts.outputs.TAG }}'",
            "dpdk_tag" : "dpdk-cn10k-'${{ steps.artifacts.outputs.DPDK_BASE_PKG_VERSION }}'_'${{ steps.artifacts.outputs.DPDK_PKG_VERSION }}'-'${{ steps.artifacts.outputs.DISTRO }}'-'${{ steps.artifacts.outputs.DPDK_PKG_VERSION }}'",
            "has_dpdk" : "true", "distro" : "'${{ steps.artifacts.outputs.DISTRO }}'",
            "platform" : "cn10k", "devel": "'${{ steps.artifacts.outputs.IS_DEVEL }}'"}}'
